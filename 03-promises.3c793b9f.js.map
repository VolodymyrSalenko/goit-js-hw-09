{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAEMC,EAAoBC,SAASC,cAAc,kBAC3CC,EAAmBF,SAASC,cAAc,iBAC1CE,EAAgBH,SAASC,cAAc,mBA8B7C,SAASG,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAGvBA,E,IAxCgBN,SAASC,cAAc,mBAE/Ba,iBAAiB,SAG7B,SAA8BC,GAC5BA,EAAQC,iBAOR,IALA,IAAMC,EAAaC,OAAOnB,EAAkBoB,OACtCC,EAAYF,OAAOhB,EAAiBiB,OACpCE,EAAcH,OAAOf,EAAcgB,OACrCG,EAAYL,EAEPM,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EAErCnB,EAAcmB,EAAGD,GAChBE,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBoB,QAAQC,IAAI,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,OAC1DuB,EAAAhC,GAASiC,OAAOC,QAAQ,uBAAwCH,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAEvE0B,OAAM,SAAAP,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBoB,QAAQC,IAAI,sBAAuCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,OACzDuB,EAAAhC,GAASiC,OAAOG,QAAQ,sBAAqCL,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAGrEgB,GAAaF,C","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\n\nconst inputFirstDelayEl = document.querySelector('[name=\"delay\"]');\nconst inputStepDelayEl = document.querySelector('[name=\"step\"]');\nconst inputAmountEl = document.querySelector('[name=\"amount\"]');\nconst btnSubmitEl = document.querySelector('[type=\"submit\"]');\n\nbtnSubmitEl.addEventListener('click', onStartCreatePromise);\n\n\nfunction onStartCreatePromise(element) {\n  element.preventDefault();\n\n  const firstDelay = Number(inputFirstDelayEl.value);\n  const stepDelay = Number(inputStepDelayEl.value);\n  const amountCalls = Number(inputAmountEl.value);\n  let delayTime = firstDelay;\n\n  for (let i = 1; i <= amountCalls; i += 1) {\n\n    createPromise(i, delayTime)\n    .then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n    delayTime += stepDelay;\n  };\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    },\n    delay);\n  });  \n};"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$inputFirstDelayEl","document","querySelector","$ce04d3a99e08e73b$var$inputStepDelayEl","$ce04d3a99e08e73b$var$inputAmountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","element","preventDefault","firstDelay","Number","value","stepDelay","amountCalls","delayTime","i","then","param","console","log","concat","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.3c793b9f.js.map"}